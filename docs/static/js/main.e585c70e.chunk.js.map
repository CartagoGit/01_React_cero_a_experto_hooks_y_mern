{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","categories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"wNAGaA,EAAc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAAoB,EACzBC,mBAASF,GADgB,mBACtDG,EADsD,KAC1CC,EAD0C,KAiB7D,OACC,sBAAMC,SAXc,SAACC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAE9BR,GAAc,SAACS,GAAD,MAAO,CAACP,MACtBC,EAAc,KACRA,EAAc,KAIrB,SACC,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAhBd,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,a,8BCHZG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,UAJR,uCAIQ,kBAFT,GAES,cACuBC,UACtCH,GAFe,oBAHR,oCAGQ,SAKAI,MAAMF,GALN,cAKbG,EALa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXtB,kBAiBZM,GAjBY,4CAAH,sDCFPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,qBAAf,UAEI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHd,SAACA,GAAc,IAAD,EACdd,mBAAS,CAClCqB,KAAM,GACNa,SAAS,IAH8B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACTxB,EAAQC,GAAUwB,MAAK,SAACC,GACvBH,EAAS,CACRf,KAAMkB,EACNL,SAAS,SAGT,CAACpB,IAEGqB,EDH2BK,CAAY1B,GAAhCa,EAT0B,EAShCN,KAAca,EATkB,EASlBA,QAEtB,OACC,qCACC,6BAAKpB,IACKoB,GAAW,4CAIrB,qBAAKJ,UAAU,WAAf,SAIEH,EAAOJ,KAAI,SAACC,GAAD,OAGX,aAFA,CAEC,EAAD,eAA8BA,GAAZA,EAAIC,aE3BdgB,EAAe,WAAM,MAEGzC,mBAAS,CAAC,iBAFb,mBAE1BF,EAF0B,KAEdC,EAFc,KAUjC,OACC,qCACC,8CACA,cAAC,EAAD,CAAaD,WAAYA,EAAYC,cAAeA,IACpD,uBAEA,6BACED,EAAWyB,KAAI,SAACT,GAAD,OACf,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MChBnB4B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.e585c70e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ categories, setCategories }) => {\r\n\tconst [inputValue, setInputValue] = useState(categories);\r\n\t// console.log(categories);\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (inputValue.trim().length > 0) {\r\n\t\t\t// setCategories((c) => [inputValue, ...c]);\r\n\t\t\tsetCategories((c) => [inputValue]);\r\n\t\t\tsetInputValue(\"\");\r\n\t\t} else setInputValue(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input type='text' value={inputValue} onChange={handleInputChange} />\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired\r\n};\r\n","const apiWeb = \"https://api.giphy.com/v1/gifs/search\";\r\nconst apiKey = \"z56j7qt1NchrW75KsQCI2ysX5sfLWZtJ\";\r\nconst limit = 10;\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `${apiWeb}?limit=${limit}&q=${encodeURI(\r\n        category\r\n    )}&api_key=${apiKey}`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        };\r\n    });\r\n\r\n    // console.log(gifs);\r\n    // setImages(gifs);\r\n    return gifs;\r\n    // console.log(images);\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    // console.log(id,title,url);\r\n    return (\r\n        <div className='card animate__tada'>\r\n            {/* {props} */}\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, { useState, useEffect } from \"react\";\r\nimport React from \"react\";\r\nimport { useFetchGif } from \"../hooks/useFetchGifs\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\t// const [count, setCount] = useState(0);\r\n\t// const [images, setImages] = useState([]);\r\n\r\n\t// useEffect(() => {\r\n\t// \tgetGifs(category).then((imgs) => setImages(imgs));\r\n\t// \t//// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t// }, [category]);\r\n\r\n\tconst { data: images, loading } = useFetchGif(category);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>{category}</h3>\r\n            {loading && <p>Cargando...</p>}\r\n\r\n\t\t\t\r\n\r\n\t\t\t<div className='cardGrid'>\r\n\t\t\t\t{/* { <h3>{count}</h3> } */}\r\n\t\t\t\t{/* <button onClick={ () => setCount(count+1)}></button> */}\r\n\r\n\t\t\t\t{images.map((img) => (\r\n\t\t\t\t\t// <li key={id}> {title}</li>\r\n\t\t\t\t\t// <GifGridItem key={img.id} img ={img}/>\r\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGif = (category) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then((imgs) => {\r\n\t\t\tsetState({\r\n\t\t\t\tdata: imgs,\r\n\t\t\t\tloading: false\r\n\t\t\t});\r\n\t\t});\r\n\t}, [category]);\r\n\r\n\treturn state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\t// const categories = [\"One Punch\", \"Samurai X\", \"Dragon ball\"];\r\n\tconst [categories, setCategories] = useState(['Busca un gif']);\r\n\r\n\t// const handleAdd = () =>{\r\n\t//     const element = 'Jei';\r\n\t//     // setCategories([...categories,element]); //Una solucion\r\n\t//     setCategories( c => [...c, element]);\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n\t\t\t<AddCategory categories={categories} setCategories={setCategories} />\r\n\t\t\t<hr />\r\n\t\t\t{/* <button onClick={handleAdd}>Agregar</button> */}\r\n\t\t\t<ol>\r\n\t\t\t\t{categories.map((category) => (\r\n\t\t\t\t\t<GifGrid key={category} category={category} />\r\n\t\t\t\t))}\r\n\t\t\t</ol>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {GifExpertApp} from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}